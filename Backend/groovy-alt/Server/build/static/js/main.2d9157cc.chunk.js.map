{"version":3,"sources":["components/MoodSearch/Ripple-1s-200px.gif","components/GooeyComponent/GooeyComponent.js","components/MoodSearch/MoodSearch.js","components/MoodSearch/MoodSearchWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["GooeyComponent","className","MoodSearch","props","useState","moodEntry","setmoodEntry","isLoadingSong","setIsLoadingSong","isPlayingSong","setIsPlayingSong","src","loadingGif","alt","style","color","fontWeight","fontSize","type","value","onChange","event","target","placeholder","onClick","songQuery","axios","get","then","response","console","log","data","vidDurations","onSearch","songLinks","setTimeout","catch","e","error","MoodSearchWrapper","currentVideo","setCurrentVideo","playList","setplayList","useEffect","display","playing","url","App","currentBrowser","navigator","userAgent","isChromeBrowser","RegExp","test","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAAe,G,MAAA,IAA0B,6C,gCCQ1BA,EANQ,WACnB,OACI,qBAAKC,UAAU,WCqERC,EAnEI,SAACC,GAClB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KA8BA,OAAIH,EAEA,qBAAKN,UAAU,yBAAf,SACE,qBAAKU,IAAKC,EAAYC,IAAI,iBAGrBJ,EAEP,qBAAKR,UAAU,yBAAf,SACE,cAAC,EAAD,MAKF,sBAAKA,UAAU,yBAAf,UACE,mBAAGa,MAAO,CAACC,MAAO,QAASC,WAAY,OAAQC,SAAU,QAAzD,kCACA,uBACEC,KAAK,OACLC,MAAOd,EACPe,SAvBS,SAACC,GAChBf,EAAae,EAAMC,OAAOH,QAuBpBI,YAAY,iCAEd,qBAAKtB,UAAU,yBAAyBuB,QA/BtB,SAACH,GAnBD,IAACI,IAoBP,GAAD,OAAIpB,EAAJ,UAnBfG,GAAiB,GACjBkB,IACGC,IADH,6CAC6CF,IAC1CG,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASG,KAAKC,aAAa,IACvC9B,EAAM+B,SAASL,EAASG,KAAKG,WAC7B3B,GAAiB,GACjBE,GAAiB,GACjB0B,YAAW,WACTN,QAAQC,IAAI,4CACZrB,GAAiB,KAChBmB,EAASG,KAAKC,aAAa,OAE/BI,OAAM,SAACC,GACNR,QAAQS,MAAMD,MAMlBhC,EAAa,KA6BT,SACE,qBACEL,UAAU,cACVU,IAAI,gCACJE,IAAI,sB,yBCvCD2B,EApBW,SAACrC,GAEzB,MAAwCC,mBAAS,IAAjD,mBAAOqC,EAAP,KAAqBC,EAArB,KAEA,EAAgCtC,mBAAS,IAAzC,mBAAOuC,EAAP,KAAiBC,EAAjB,KAOA,OAJAC,qBAAU,WACRH,EAAgBC,EAAS,MACxB,CAACA,IAGF,sBAAK1C,UAAU,uBAAf,UAEE,cAAC,IAAD,CAAaa,MAAO,CAACgC,QAAQ,QAASC,SAAS,EAAMC,IAAKP,IAC1D,cAAC,EAAD,CAAYP,SAAUU,QCMbK,MAxBf,WACE,IAAMC,EAAiBC,UAAUC,UAE3BC,EADoB,IAAIC,OAAO,aACKC,KAAKL,GAC/C,OACE,sBAAKjD,UAAU,MAAf,UACE,yCACCoD,GACC,qBAAKpD,UAAU,uBAAf,SACE,uOAOFoD,GAAmB,cAAC,EAAD,IACrB,mBAAGpD,UAAU,SAAb,qCCRSuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2d9157cc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Ripple-1s-200px.5779f3bd.gif\";","import './GooeyAnimation.css'\r\n\r\nconst GooeyComponent = () => {\r\n    return(\r\n        <div className=\"gooey\"></div>\r\n    );\r\n};\r\n\r\nexport default GooeyComponent;","import \"./MoodSearch.css\";\r\nimport { useState } from \"react\";\r\nimport loadingGif from \"./Ripple-1s-200px.gif\";\r\nimport axios from \"axios\";\r\nimport GooeyComponent from \"../GooeyComponent/GooeyComponent\";\r\n\r\nconst MoodSearch = (props) => {\r\n  const [moodEntry, setmoodEntry] = useState(\"\");\r\n  const [isLoadingSong, setIsLoadingSong] = useState(false);\r\n  const [isPlayingSong, setIsPlayingSong] = useState(false);\r\n\r\n  const searchForVideos = (songQuery) => {\r\n    setIsLoadingSong(true);\r\n    axios\r\n      .get(`http://moodify-build.herokuapp.com/${songQuery}`)\r\n      .then((response) => {\r\n        console.log(response.data.vidDurations[0]);\r\n        props.onSearch(response.data.songLinks);\r\n        setIsLoadingSong(false);\r\n        setIsPlayingSong(true);\r\n        setTimeout(() => {\r\n          console.log(\"setting isPlayingSong to False when done\");\r\n          setIsPlayingSong(false);\r\n        }, response.data.vidDurations[0]); //show the search bar after song is done\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n  };\r\n\r\n  const findSongHandler = (event) => {\r\n    searchForVideos(`${moodEntry} music`);\r\n    setmoodEntry(\"\");\r\n  };\r\n\r\n  const onTyping = (event) => {\r\n    setmoodEntry(event.target.value);\r\n  };\r\n\r\n  if (isLoadingSong) {\r\n    return (\r\n      <div className=\"mood-search__container\">\r\n        <img src={loadingGif} alt=\"Loading...\" />\r\n      </div>\r\n    );\r\n  } else if (isPlayingSong) {\r\n    return (\r\n      <div className=\"mood-search__container\">\r\n        <GooeyComponent />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"mood-search__container\">\r\n        <p style={{color: 'white', fontWeight: 'bold', fontSize: '18pt'}}>Type your mood here:</p>\r\n        <input\r\n          type=\"text\"\r\n          value={moodEntry}\r\n          onChange={onTyping}\r\n          placeholder=\"ex: peachy, sad, mellow, ...\"\r\n        />\r\n        <div className=\"mood-search__submitBtn\" onClick={findSongHandler}>\r\n          <img\r\n            className=\"search-icon\"\r\n            src=\"https://img.icons8.com/search\"\r\n            alt=\"Search Icon\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MoodSearch;\r\n","import MoodSearch from \"./MoodSearch\";\r\nimport \"./MoodSearchWrapper.css\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\n// import VideoPlayer from \"../VideoPlayer/VideoPlayer\";\r\nimport ReactPlayer from \"react-player/youtube\";\r\n\r\nconst MoodSearchWrapper = (props) => {\r\n  \r\n  const [currentVideo, setCurrentVideo] = useState(\"\");\r\n\r\n  const [playList, setplayList] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    setCurrentVideo(playList[0]); //Have to put this here since it relies on setplayList\r\n  }, [playList]); // only set the dependency to the value involved not the state being changed\r\n\r\n  return (\r\n    <div className=\"mood-search__wrapper\">\r\n      {/* <VideoPlayer source={currentVideo} /> */}\r\n      <ReactPlayer style={{display:'none'}} playing={true} url={currentVideo}/>\r\n      <MoodSearch onSearch={setplayList} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoodSearchWrapper;\r\n","import \"./App.css\";\r\nimport MoodSearchWrapper from \"./components/MoodSearch/MoodSearchWrapper\";\r\n\r\nfunction App() {\r\n  const currentBrowser = navigator.userAgent;\r\n  const checkBrowserRegex = new RegExp(\"Chrome/.*\");\r\n  const isChromeBrowser = checkBrowserRegex.test(currentBrowser);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>moodify</h1>\r\n      {isChromeBrowser && (\r\n        <div className=\"incompatible_message\">\r\n          <h1>\r\n            We apologize for the inconvenience, you are using an unsupported\r\n            browser because Chrome disabled autoplay, something that's required for this work. \r\n            Please use another browser to use our service.\r\n          </h1>\r\n        </div>\r\n      )}\r\n      {!isChromeBrowser && <MoodSearchWrapper />}\r\n      <p className=\"credit\">\r\n        By Abdallah Hwishel\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}